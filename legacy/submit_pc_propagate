#!/cvmfs/experimental.cloud.coepp.org.au/sw/sl6/gcc484/python274/x86_64/coepp/pytools/1.0.0/bin/python

# -- script for automation of speed testing --
from subprocess import call, check_output, Popen, PIPE
import argparse
import sys
import re

SUBMIT_CMD = "qsub"

template = \
"""#!/bin/bash

# --- Start PBS Directives ---
# Inherit current user environment
#PBS -V

# Submit to the long queue
#PBS -q long
#PBS -l cput=72:00:00

# Merge stdout and stderr
#PBS -j oe

# Job Name
#PBS -N {splitname}

# Email on never
#PBS -m n
#PBS -M harry.poulter@coepp.org.au
# --- End PBS Directives ---

# Get unlimited stack size
ulimit -s unlimited

# Run the job from directory in which qsub command was run
cd $PBS_O_WORKDIR

# Run pc_propagate and time it too
time ./{executable} ../phoenix-split/pc_multinest_hp6_{split_id:03}.txt ../phoenix-split/pc_multinest_derived_{split_id:03}.txt
"""

def main():
  parser = make_parser()
  args = parser.parse_args()

  return run_split(args)


def run_split(args):
  """Split jobs"""
  # Run from 001 to 099
  for i in xrange(1,100):
    splitname = "{}_{:03}".format(args.jobname, i)
     
    context = {
      "splitname"  : splitname,
      "executable" : args.executable,
      "split_id"   : i
    }
 
    with open("{}.job".format(splitname), 'w') as job_out:
      job_out.write(template.format(**context))

    print_verbose(1, args.verbosity,
        "Created file {}.job", splitname)

    if args.submit is not None:
      if i in args.submit:
        call([SUBMIT_CMD, "{}.job".format(splitname)])
        print_verbose(1, args.verbosity,
          "Submitted job {}", splitname)

    else:
      pass
      

  else:
    return 0


def make_parser():
  """Return the parser used to parse input arguments"""
  parser = argparse.ArgumentParser(
    description=(
      "%(prog)s, a job submission script generator for pc_multinest."),
    epilog=(
      ""),
    formatter_class=argparse.RawDescriptionHelpFormatter)

  parser.add_argument("-j", "--job-name",
    type=str,
    default="pc_propagate",
    dest="jobname",
    help="set job name")

  parser.add_argument("-x", "--exec",
    type=str,
    default="pc_propagate",
    dest="executable",
    help="set non-standard executable name")

  parser.add_argument("-s", "--submit",
    action=SubmitAction,
    default=None,
    dest="submit",
    help="which jobs to submit after generation")

  parser.add_argument("-v", "--verbose",
    action="count",
    default=0,
    dest="verbosity",
    help="specify level of verbosity")

  parser.add_argument("--version",
    action="version",
    version="%(prog)s v1.0-rc0")

  return parser

class SubmitAction(argparse.Action):
  """Class to process node lists during argument parsing"""
  def __init__(self, option_strings, dest, nargs=None, **kwargs):
    if nargs is not None:
      raise ValueError("nargs not allowed")
    super(SubmitAction, self).__init__(option_strings, dest, **kwargs)

  def __call__(self, parser, namespace, values, option_string=None):
    submit_list = SubmitAction.expand_submit_list(values)
    setattr(namespace, self.dest, submit_list)
    
  @staticmethod
  def expand_submit_list(submit_list):
    expanded_submit_list = []

    for job in submit_list.split(','):
      if '-' not in job:
        expanded_submit_list.append(int(job))
      else:
        job_range = map(lambda x: int(x), job.split('-'))

        for submit_id in range(job_range[0], job_range[1]+1):
          expanded_submit_list.append(int(submit_id))

    return expanded_submit_list

def print_warn(content, *args):
  # callerName = sys._getframe(1).f_code.co_name
  callerName = "{}".format(sys.argv[0].strip("./"))
  print("{0}: warn: {1}".format(callerName, content.format(*args)))

def print_error(content, *args):
  # callerName = sys._getframe(1).f_code.co_name
  callerName = "{}".format(sys.argv[0].strip("./"))
  print("{0}: error: {1}".format(callerName, content.format(*args)))

def print_verbose(level, verbosity, content, *args):
  if (verbosity >= level):
    # callerName = sys._getframe(1).f_code.co_name
    callerName = "{}".format(sys.argv[0].strip("./"))
    print("{0}: {1}".format(callerName, content.format(*args)))

if __name__ == '__main__':
  sys.exit(main())